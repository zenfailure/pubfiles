#!/bin/bash
TMUX_CONFIG_DIR="$HOME/.tmux"
source $TMUX_CONFIG_DIR/00-variables

mpc_next() { mpc next && tmux refresh-client -S; }
mpc_prev() { mpc prev && tmux refresh-client -S; }
mpc_toggle() { mpc toggle && tmux refresh-client -S; }

xsel_paste_primary() {
    tmux set-buffer -- "$(xsel -op)"
    tmux paste-buffer
}

xsel_paste_clipboard() {
    tmux set-buffer -- "$(xsel -ob)"
    tmux paste-buffer
}


logging_toggle() {
    if [[ -e /tmp/tmux_logging_toggled ]]; then
        tmux display 'Disabling logging ...'
        rm -f /tmp/tmux_logging_toggled
    else
        tmux display 'Enabling logging ...'
        touch /tmp/tmux_logging_toggled
    fi
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[logging]}/scripts/toggle_logging.sh
}

logging_screenshoot() {
    tmux display 'Capturing current screen ...'
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[logging]}/scripts/screen_capture.sh
}

logging_savebuffer() {
    tmux display 'Capturing entire buffer ...'
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[logging]}/scripts/save_complete_history.sh
}

logging_clearpane() {
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[logging]}/scripts/clear_history.sh
    tmux display 'Pane buffer cleared!'
}

extrakto_start() {
    tmux split-window -c '#{pane_current_path}' -v -l 14 \
        $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[extrakto]}/scripts/tmux-extrakto.sh
}

reload_config() {
    tmux if-shell '[ -e ~/.tmux.conf ]' \
        'source ~/.tmux.conf ; display "Reloaded user config!"' \
        'display "No user tmux config found!"'
}

reload_env() {
	persist_env DISPLAY
}

persist_env() {
	tmux display "Persisting env!"
	local D=$(tmux show -v '@display')
	if [[ $(tmux show-environment DISPLAY | cut -d= -f2) =~ :[0-9] ]]; then
		D=$(tmux show-environment DISPLAY | cut -d= -f2)
		tmux set '@display' "$D"
	else
		tmux set-environment DISPLAY "$D"
	fi
}

detach_ttys() {
    local terms=($(tmux list-clients | \grep -i -e fbterm -e linux | cut -d: -f1 | tr '\n' ' '))
    for t in ${terms[*]}; do
        tmux detach-client -t "$t"
    done
    tmux refresh-client -S
    tmux display "Clients ${terms[*]} detached!"
}

detach_nottys() {
    local terms=($(tmux list-clients | \grep -v -i -e fbterm -e linux | cut -d: -f1 | tr '\n' ' '))
    for t in ${terms[*]}; do
        tmux detach-client -t "$t"
    done
    tmux refresh-client -S
    tmux display "Clients ${terms[*]} detached!"
}

switch_main_mode() {
    tmux set status on
    tmux switch-client -T main
    tmux set key-table main
}

switch_sendkeys_mode() {
    tmux set status off
    tmux switch-client -T send-keys
    tmux set key-table send-keys
}

toggle_mode() {
    if [[ `tmux show-option -v key-table` == main ]]; then
        switch_sendkeys_mode
    else
        switch_main_mode
    fi
}

choose_window() {
    tmux run 'tmux choose-tree -Nwf"##{==:##{session_name},#{session_name}}"'
}

tmux_jump() {
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[jump]}/scripts/tmux-jump.sh
}

tmux_thumbs() {
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[thumbs]}/tmux-thumbs.sh
}

tmux_copycat() {
    $TMUX_PLUGIN_DIR/${TMUX_PLUGINS[copycat]}/scripts/copycat_mode_start.sh '❯'
}


main() {
    command="$1"
    shift
    $command "$@" &>/dev/null
    exit 0
}

main "$@"
